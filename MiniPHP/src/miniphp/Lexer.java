/* The following code was generated by JFlex 1.6.1 */

package miniphp;
import static miniphp.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/keviu/Documents/Ciclo 5/Lenguajes/Proyecto/Proyecto-PHP-lexico/MiniPHP/src/miniphp/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\62\1\102\1\104\1\104\1\103\22\0\1\62\1\40\1\65"+
    "\1\60\1\57\1\36\1\43\1\66\1\67\1\72\1\34\1\33\1\76"+
    "\1\33\1\53\1\35\1\1\1\101\6\100\2\77\1\55\1\75\1\42"+
    "\1\37\1\41\1\54\1\55\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\13"+
    "\1\71\1\61\1\74\1\56\1\32\1\0\1\44\1\3\1\4\1\46"+
    "\1\6\1\7\1\10\1\107\1\12\1\13\1\13\1\14\1\15\1\45"+
    "\1\47\1\106\1\21\1\50\1\23\1\24\1\25\1\26\1\27\1\51"+
    "\1\31\1\13\1\70\1\52\1\73\1\0\6\13\1\105\33\13\1\64"+
    "\35\13\1\64\2\13\1\63\75\13\u1f28\0\1\104\1\104\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\21\3\1\4\4\5\1\4\1\6"+
    "\2\7\1\6\2\3\7\4\1\10\1\3\2\4\1\11"+
    "\1\12\1\13\1\14\1\2\1\15\1\2\4\16\1\0"+
    "\1\17\2\3\1\20\34\3\1\5\1\0\1\21\1\7"+
    "\1\0\1\6\2\3\1\17\1\22\1\0\2\23\2\0"+
    "\1\4\2\0\1\24\2\0\1\2\1\17\1\0\1\17"+
    "\1\2\1\0\40\3\2\0\1\6\1\23\2\24\7\17"+
    "\27\3\1\25\1\3\1\21\1\0\1\23\5\17\25\3"+
    "\1\26\1\23\2\17\2\3\1\20\12\3\1\23\10\3"+
    "\1\20\1\3\1\23\4\3\1\23\2\3\1\23\1\3"+
    "\1\23\1\3\1\0\1\3\2\0\1\3\4\0\1\27"+
    "\1\0\2\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678"+
    "\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8"+
    "\0\u0900\0\u0948\0\u0990\0\110\0\u06c0\0\u09d8\0\u0a20\0\u0a68"+
    "\0\u0ab0\0\u0af8\0\u0b40\0\110\0\110\0\110\0\110\0\u0b88"+
    "\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8"+
    "\0\u0e10\0\u0e58\0\u0120\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0"+
    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440"+
    "\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\110"+
    "\0\u1680\0\u0a20\0\110\0\u16c8\0\110\0\u1710\0\u1758\0\u17a0"+
    "\0\110\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u0120\0\u0af8"+
    "\0\u1950\0\110\0\u0b40\0\u1998\0\u0ca8\0\u19e0\0\u1a28\0\u1a70"+
    "\0\u0d38\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68"+
    "\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8"+
    "\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8"+
    "\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328"+
    "\0\u2370\0\u23b8\0\u2400\0\u2448\0\u0120\0\u2490\0\u0af8\0\u0b40"+
    "\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0"+
    "\0\u2718\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910"+
    "\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50"+
    "\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u0120\0\u2d48"+
    "\0\110\0\u2d90\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40"+
    "\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180"+
    "\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0"+
    "\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\110\0\u3570\0\u35b8"+
    "\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8"+
    "\0\u3840\0\u3888\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38"+
    "\0\u3a80\0\u3ac8\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3b10"+
    "\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70"+
    "\0\u3eb8\0\u3f00\0\u3f48\0\u3f90\0\u3fd8\0\u4020\0\u4068\0\u40b0"+
    "\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260\0\110\0\u42a8"+
    "\0\u40b0\0\u40f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\5\1\13\1\5\1\14\1\5\1\15\1\16"+
    "\1\17\1\5\1\20\1\21\1\22\1\23\1\24\3\5"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\15\1\7\1\16\1\20\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\44"+
    "\1\50\1\51\1\5\1\52\1\53\3\54\3\55\1\56"+
    "\1\57\3\60\1\61\1\50\1\0\1\5\1\17\1\5"+
    "\111\0\1\62\1\63\1\64\2\63\1\65\21\63\1\66"+
    "\2\63\11\0\5\63\1\66\1\0\1\67\7\0\2\63"+
    "\12\0\1\70\2\62\3\0\3\63\1\0\2\5\1\71"+
    "\16\5\1\72\1\73\7\5\11\0\4\5\1\72\1\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\32\5"+
    "\11\0\6\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\1\5\1\74\11\5\1\75\2\5\1\76\13\5"+
    "\11\0\1\74\2\5\1\76\2\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\5\5\1\77\3\5\1\100"+
    "\20\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\3\5\1\101\10\5\1\102\1\103\7\5"+
    "\1\104\1\5\1\105\2\5\11\0\1\5\1\103\3\5"+
    "\1\105\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\1\5\1\106\7\5\1\107\12\5\1\110\5\5\11\0"+
    "\1\106\5\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\13\5\1\111\2\5\1\112\13\5\11\0\3\5"+
    "\1\112\2\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\14\5\1\113\1\114\4\5\1\115\7\5\11\0"+
    "\1\5\1\114\4\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\11\5\1\116\20\5\11\0\6\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\1\5\1\117"+
    "\3\5\1\120\24\5\11\0\1\117\5\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\21\5\1\73\10\5"+
    "\11\0\4\5\1\73\1\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\21\5\1\121\2\5\1\122\5\5"+
    "\11\0\4\5\1\121\1\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\5\5\1\123\24\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\23\5"+
    "\1\124\6\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\10\5\1\125\10\5\1\126\10\5"+
    "\11\0\4\5\1\126\1\5\11\0\2\5\12\0\3\5"+
    "\3\0\2\5\1\125\1\0\15\5\1\115\4\5\1\100"+
    "\7\5\11\0\1\5\1\115\4\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\1\5\1\16\30\5\11\0"+
    "\1\16\5\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\31\5\1\127\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\1\3\35\0\1\44\13\0"+
    "\1\67\23\0\3\60\42\0\1\130\2\0\1\44\104\0"+
    "\1\131\1\132\1\0\1\44\107\0\1\44\107\0\1\133"+
    "\1\0\1\133\105\0\1\133\111\0\1\45\105\0\1\133"+
    "\2\0\1\45\11\0\1\134\72\0\1\44\3\0\1\135"+
    "\45\0\2\5\1\71\16\5\1\72\1\73\7\5\11\0"+
    "\1\5\1\136\2\5\1\72\1\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\32\5\11\0\3\5\1\137"+
    "\2\5\11\0\2\5\12\0\3\5\3\0\3\5\37\0"+
    "\1\44\12\0\1\135\36\0\1\140\35\0\1\44\37\0"+
    "\3\140\47\0\1\141\47\0\1\142\20\143\1\144\10\143"+
    "\1\145\10\0\4\143\1\144\1\143\11\0\2\143\12\0"+
    "\3\146\3\0\3\143\102\132\4\0\2\132\62\0\1\50"+
    "\20\0\1\50\5\0\32\5\11\0\6\5\11\0\1\5"+
    "\1\147\12\0\3\5\3\0\3\5\61\150\1\151\3\150"+
    "\1\152\1\150\1\0\2\150\1\0\7\150\1\0\5\150"+
    "\61\153\1\154\4\153\1\152\1\0\2\153\1\0\7\153"+
    "\1\0\5\153\1\0\1\60\4\63\1\65\24\63\11\0"+
    "\6\63\1\0\1\67\7\0\2\63\12\0\3\60\3\0"+
    "\3\63\102\0\1\61\6\0\1\62\4\63\1\65\24\63"+
    "\11\0\6\63\1\0\1\67\7\0\2\63\12\0\1\70"+
    "\2\62\3\0\3\63\1\0\32\63\11\0\6\63\11\0"+
    "\2\63\12\0\3\63\3\0\3\63\1\0\1\155\31\63"+
    "\11\0\6\63\11\0\2\63\12\0\2\63\1\155\3\0"+
    "\3\63\1\0\1\156\31\63\1\157\10\0\6\63\11\0"+
    "\2\63\12\0\3\160\3\0\3\63\1\0\7\161\23\63"+
    "\11\0\1\161\1\63\1\161\3\63\11\0\2\63\12\0"+
    "\3\161\3\0\3\63\1\0\1\140\75\0\3\140\7\0"+
    "\1\70\4\0\1\162\44\0\1\67\23\0\3\70\7\0"+
    "\22\5\1\163\7\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\21\5\1\164\10\5\11\0"+
    "\4\5\1\164\1\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\13\5\1\165\7\5\1\166\6\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\1\5\1\167\14\5\1\170\13\5\11\0\1\167\2\5"+
    "\1\170\2\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\15\5\1\116\14\5\11\0\1\5\1\116\4\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\3\5"+
    "\1\171\2\5\1\172\23\5\11\0\6\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\5\5\1\73\24\5"+
    "\11\0\6\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\10\5\1\173\21\5\11\0\6\5\11\0\2\5"+
    "\12\0\3\5\3\0\2\5\1\173\1\0\17\5\1\174"+
    "\12\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\1\5\1\174\1\5\1\0\4\5\1\175\25\5\11\0"+
    "\2\5\1\175\3\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\1\5\1\176\30\5\11\0\1\176\5\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\11\5"+
    "\1\177\11\5\1\200\6\5\11\0\6\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\13\5\1\201\16\5"+
    "\11\0\6\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\15\5\1\104\14\5\11\0\1\5\1\104\4\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\15\5"+
    "\1\202\14\5\11\0\1\5\1\202\4\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\16\5\1\203\13\5"+
    "\11\0\3\5\1\203\2\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\23\5\1\173\6\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\17\5"+
    "\1\204\12\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\1\5\1\204\1\5\1\0\3\5\1\205\16\5"+
    "\1\206\1\207\6\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\22\5\1\210\7\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\22\5\1\177\7\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\14\5\1\211\15\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\26\5\1\73\3\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\11\5\1\212\4\5\1\213"+
    "\13\5\11\0\3\5\1\213\2\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\2\5\1\214\27\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\20\5\1\215\11\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\1\5\1\216\30\5\11\0"+
    "\1\216\5\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\21\5\1\217\10\5\11\0\4\5\1\217\1\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\1\5"+
    "\1\220\22\5\1\221\3\5\1\73\1\5\11\0\1\220"+
    "\5\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\10\5\1\222\21\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\2\5\1\222\34\131\1\223\1\0\31\131"+
    "\1\0\2\131\1\0\15\131\106\0\1\224\2\0\32\5"+
    "\11\0\2\5\1\225\3\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\32\5\11\0\4\5\1\225\1\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\1\140"+
    "\4\0\1\162\70\0\3\140\7\0\1\142\31\63\11\0"+
    "\6\63\11\0\2\63\13\0\2\142\3\0\3\63\1\0"+
    "\32\143\11\0\6\143\11\0\2\143\12\0\3\143\3\0"+
    "\3\143\1\0\5\143\1\226\24\143\11\0\6\143\11\0"+
    "\2\143\12\0\3\143\3\0\3\143\1\0\1\142\75\0"+
    "\3\146\7\0\1\146\31\63\11\0\6\63\11\0\2\63"+
    "\12\0\3\146\3\0\3\63\61\150\1\151\3\150\1\227"+
    "\1\150\1\0\2\150\1\0\7\150\1\0\5\150\61\153"+
    "\1\154\4\153\1\230\1\0\2\153\1\0\7\153\1\0"+
    "\5\153\1\231\1\232\1\233\1\234\24\233\1\235\2\233"+
    "\11\231\5\233\1\235\11\231\2\233\12\231\1\233\2\232"+
    "\3\0\1\63\2\233\1\0\1\236\75\0\3\237\6\0"+
    "\1\231\1\160\31\233\11\231\6\233\11\231\2\233\12\231"+
    "\3\160\3\0\1\63\2\233\1\0\1\236\31\0\1\157"+
    "\43\0\3\237\7\0\23\5\1\240\6\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\1\5"+
    "\1\241\30\5\11\0\1\241\5\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\13\5\1\242\16\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\3\5\1\243\26\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\22\5\1\244\7\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\15\5\1\100\14\5\11\0\1\5\1\100\4\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\13\5\1\245"+
    "\16\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\1\5\1\246\30\5\11\0\1\246\5\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\16\5"+
    "\1\73\13\5\11\0\3\5\1\73\2\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\23\5\1\241\6\5"+
    "\11\0\6\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\4\5\1\247\1\5\1\250\2\5\1\251\10\5"+
    "\1\252\3\5\1\253\3\5\11\0\2\5\1\247\3\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\13\5"+
    "\1\73\16\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\23\5\1\73\6\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\5\5"+
    "\1\254\24\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\22\5\1\221\7\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\3\5"+
    "\1\255\26\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\2\5\1\104\27\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\13\5"+
    "\1\256\16\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\13\5\1\257\16\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\23\5"+
    "\1\260\6\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\5\5\1\261\24\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\5\5"+
    "\1\177\24\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\5\5\1\262\24\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\15\5"+
    "\1\177\7\5\1\263\4\5\11\0\1\5\1\177\4\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\23\5"+
    "\1\264\6\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\13\5\1\265\16\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\24\5"+
    "\1\266\5\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\23\5\1\265\6\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\16\5"+
    "\1\120\13\5\11\0\3\5\1\120\2\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\11\5\1\177\20\5"+
    "\11\0\6\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\5\5\1\267\24\5\11\0\6\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\1\5\1\270\30\5"+
    "\11\0\1\270\5\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\35\0\1\271\161\0\1\272\1\0\3\143\1\273"+
    "\26\143\11\0\6\143\11\0\2\143\12\0\3\143\3\0"+
    "\3\143\1\0\1\231\75\0\3\231\6\0\1\231\1\232"+
    "\31\233\11\231\6\233\11\231\2\233\12\231\1\233\2\232"+
    "\3\0\1\63\2\233\1\0\1\233\31\63\11\0\6\63"+
    "\11\0\2\63\12\0\3\233\3\0\3\63\1\0\1\274"+
    "\31\63\11\0\6\63\11\0\2\63\12\0\2\233\1\274"+
    "\3\0\3\63\1\0\7\275\23\63\11\0\1\275\1\63"+
    "\1\275\3\63\11\0\2\63\12\0\3\275\3\0\3\63"+
    "\1\231\1\276\1\231\1\277\24\231\1\300\20\231\1\300"+
    "\26\231\2\276\4\0\3\231\1\237\75\231\3\237\4\0"+
    "\2\231\1\0\21\5\1\301\10\5\11\0\4\5\1\301"+
    "\1\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\30\5\1\73\1\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\1\5\1\302\30\5\11\0"+
    "\1\302\5\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\10\5\1\73\21\5\11\0\6\5\11\0\2\5"+
    "\12\0\3\5\3\0\2\5\1\73\1\0\22\5\1\73"+
    "\7\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\1\5\1\303\30\5\11\0\1\303\5\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\24\5"+
    "\1\304\5\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\5\5\1\305\24\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\16\5"+
    "\1\306\13\5\11\0\3\5\1\306\2\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\6\5\1\73\23\5"+
    "\11\0\6\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\26\5\1\307\3\5\11\0\6\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\10\5\1\310\21\5"+
    "\11\0\6\5\11\0\2\5\12\0\3\5\3\0\2\5"+
    "\1\310\1\0\15\5\1\311\14\5\11\0\1\5\1\311"+
    "\4\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\23\5\1\312\6\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\5\5\1\313\24\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\24\5\1\314\5\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\1\5\1\315\3\5\1\316"+
    "\24\5\11\0\1\315\5\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\21\5\1\317\10\5\11\0\4\5"+
    "\1\317\1\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\22\5\1\320\7\5\11\0\6\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\1\5\1\321\30\5"+
    "\11\0\1\321\5\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\5\5\1\322\24\5\11\0\6\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\11\5\1\323"+
    "\20\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\11\5\1\324\20\5\11\0\6\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\13\5\1\325"+
    "\16\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\106\0\1\326\2\0\16\143\1\327\13\143\11\0"+
    "\3\143\1\327\2\143\11\0\2\143\12\0\3\143\3\0"+
    "\3\143\1\231\1\274\31\233\11\231\6\233\11\231\2\233"+
    "\12\231\2\233\1\274\3\0\1\63\2\233\1\231\7\275"+
    "\23\233\11\231\1\275\1\233\1\275\3\233\11\231\2\233"+
    "\12\231\3\275\3\0\1\63\2\233\1\231\1\276\76\231"+
    "\2\276\4\0\2\231\1\0\1\330\75\0\2\231\1\330"+
    "\7\0\7\331\34\0\1\331\1\0\1\331\30\0\3\331"+
    "\7\0\1\5\1\332\30\5\11\0\1\332\5\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\2\5\1\333"+
    "\27\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\21\5\1\100\10\5\11\0\4\5\1\100"+
    "\1\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\13\5\1\177\16\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\3\5\1\171\26\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\21\5\1\334\10\5\11\0\4\5\1\334\1\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\11\5\1\335"+
    "\20\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\11\5\1\333\20\5\11\0\6\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\4\5\1\244"+
    "\25\5\11\0\2\5\1\244\3\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\11\5\1\336\20\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\14\5\1\337\15\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\4\5\1\340\25\5\11\0"+
    "\2\5\1\340\3\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\15\5\1\341\14\5\11\0\1\5\1\341"+
    "\4\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\1\5\1\342\30\5\11\0\1\342\5\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\6\5\1\343\23\5"+
    "\11\0\6\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\17\5\1\343\12\5\11\0\6\5\11\0\2\5"+
    "\12\0\3\5\3\0\1\5\1\343\1\5\1\0\23\5"+
    "\1\100\6\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\3\5\1\344\26\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\3\5"+
    "\1\73\26\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\21\5\1\345\10\5\11\0\4\5"+
    "\1\345\1\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\23\5\1\346\6\5\11\0\6\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\21\143\1\347\10\143"+
    "\11\0\4\143\1\347\1\143\11\0\2\143\12\0\3\143"+
    "\3\0\3\143\1\231\1\330\77\231\1\330\4\0\3\231"+
    "\7\331\34\231\1\331\1\231\1\331\30\231\3\331\4\0"+
    "\2\231\1\0\3\5\1\177\26\5\11\0\6\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\13\5\1\100"+
    "\16\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\5\5\1\350\24\5\11\0\6\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\23\5\1\166"+
    "\6\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\16\5\1\351\13\5\11\0\3\5\1\351"+
    "\2\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\5\5\1\352\24\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\5\5\1\353\24\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\3\5\1\354\26\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\4\5\1\355\25\5\11\0"+
    "\2\5\1\355\3\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\1\5\1\356\30\5\11\0\1\356\5\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\23\5"+
    "\1\357\6\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\5\5\1\360\24\5\11\0\6\5"+
    "\11\0\2\5\12\0\3\5\3\0\3\5\1\0\31\5"+
    "\1\361\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\4\143\1\362\25\143\11\0\2\143\1\362"+
    "\3\143\11\0\2\143\12\0\3\143\3\0\3\143\1\0"+
    "\1\5\1\166\30\5\11\0\1\166\5\5\11\0\2\5"+
    "\12\0\3\5\3\0\3\5\1\0\15\5\1\73\14\5"+
    "\11\0\1\5\1\73\4\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\1\0\15\5\1\363\14\5\11\0\1\5"+
    "\1\363\4\5\11\0\2\5\12\0\3\5\3\0\3\5"+
    "\1\0\31\5\1\364\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\5\5\1\355\24\5\11\0"+
    "\6\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\16\5\1\251\13\5\11\0\3\5\1\251\2\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\3\5\1\100"+
    "\26\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\5\5\1\365\24\5\11\0\6\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\3\5\1\366"+
    "\26\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\22\143\1\367\7\143\11\0\6\143\11\0"+
    "\2\143\12\0\3\143\3\0\3\143\1\0\23\5\1\244"+
    "\6\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\16\5\1\370\13\5\11\0\3\5\1\370"+
    "\2\5\11\0\2\5\12\0\3\5\3\0\3\5\1\0"+
    "\4\5\1\73\25\5\11\0\2\5\1\73\3\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\16\5\1\371"+
    "\13\5\11\0\3\5\1\371\2\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\1\0\5\143\1\372\24\143\11\0"+
    "\6\143\11\0\2\143\12\0\3\143\3\0\3\143\1\0"+
    "\15\5\1\356\14\5\11\0\1\5\1\356\4\5\11\0"+
    "\2\5\12\0\3\5\3\0\3\5\1\0\14\5\1\373"+
    "\15\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\3\5\1\0\23\143\1\374\6\143\11\0\6\143\11\0"+
    "\2\143\12\0\3\143\3\0\3\143\1\0\17\5\1\375"+
    "\12\5\11\0\6\5\11\0\2\5\12\0\3\5\3\0"+
    "\1\5\1\375\1\5\1\0\32\143\11\0\6\143\11\0"+
    "\2\143\4\0\1\376\5\0\3\143\3\0\3\143\1\0"+
    "\11\5\1\377\20\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\65\0\1\u0100\1\u0101\22\0\13\5"+
    "\1\u0102\16\5\11\0\6\5\11\0\2\5\12\0\3\5"+
    "\3\0\3\5\61\u0100\1\u0103\3\u0100\1\u0104\1\u0100\1\0"+
    "\2\u0100\1\0\7\u0100\1\0\5\u0100\61\u0101\1\u0105\4\u0101"+
    "\1\u0104\1\0\2\u0101\1\0\7\u0101\1\0\5\u0101\1\0"+
    "\5\5\1\16\24\5\11\0\6\5\11\0\2\5\12\0"+
    "\3\5\3\0\3\5\61\u0100\1\u0103\3\u0100\1\u0106\1\u0100"+
    "\1\0\2\u0100\1\0\7\u0100\1\0\5\u0100\74\0\1\u0107"+
    "\13\0\61\u0101\1\u0105\4\u0101\1\u0108\1\0\2\u0101\1\0"+
    "\7\u0101\1\0\5\u0101\61\u0100\1\u0103\3\u0100\1\u0104\1\u0100"+
    "\1\0\2\u0100\1\0\1\u0100\1\u0109\5\u0100\1\0\5\u0100"+
    "\61\u0101\1\u0105\4\u0101\1\u0104\1\0\2\u0101\1\0\1\u0101"+
    "\1\u010a\5\u0101\1\0\5\u0101";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17136];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\41\1\1\11\7\1\4\11\7\1\1\0"+
    "\40\1\1\11\1\0\1\1\1\11\1\0\1\11\3\1"+
    "\1\11\1\0\2\1\2\0\1\1\2\0\1\11\2\0"+
    "\2\1\1\0\2\1\1\0\40\1\2\0\44\1\1\11"+
    "\1\0\33\1\1\11\47\1\1\0\1\1\2\0\1\1"+
    "\4\0\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int lineNumber = 1;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 250) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext();return ERROR;
            }
          case 24: break;
          case 2: 
            { lexeme=yytext();return INT;
            }
          case 25: break;
          case 3: 
            { lexeme=yytext();return ID;
            }
          case 26: break;
          case 4: 
            { lexeme=yytext();return OPE_AD;
            }
          case 27: break;
          case 5: 
            { lexeme=yytext();return OPE_ARI;
            }
          case 28: break;
          case 6: 
            { lexeme=yytext();return OPE_LOGI;
            }
          case 29: break;
          case 7: 
            { lexeme=yytext();return OPE_COM;
            }
          case 30: break;
          case 8: 
            { lexeme=yytext(); return ESPACIO;
            }
          case 31: break;
          case 9: 
            { lexeme=yytext();return OPEN;
            }
          case 32: break;
          case 10: 
            { lexeme=yytext();return CLOSE;
            }
          case 33: break;
          case 11: 
            { lexeme=yytext();return PUNTOCOMA;
            }
          case 34: break;
          case 12: 
            { lexeme=yytext();return COMA;
            }
          case 35: break;
          case 13: 
            { lineNumber++;lexeme=yytext(); return NUEVALINEA;
            }
          case 36: break;
          case 14: 
            { lexeme=yytext(); return ERROR_ID;
            }
          case 37: break;
          case 15: 
            { lexeme=yytext();return FLOAT;
            }
          case 38: break;
          case 16: 
            { lexeme=yytext(); return RESERWORD;
            }
          case 39: break;
          case 17: 
            { lexeme=yytext();return COMENT;
            }
          case 40: break;
          case 18: 
            { lexeme=yytext(); return CIERRA_PHP;
            }
          case 41: break;
          case 19: 
            { lexeme=yytext();return VAR;
            }
          case 42: break;
          case 20: 
            { lexeme=yytext();return STRING;
            }
          case 43: break;
          case 21: 
            { lexeme=yytext();return BOOL;
            }
          case 44: break;
          case 22: 
            { lexeme=yytext(); return ABRE_PHP;
            }
          case 45: break;
          case 23: 
            { lexeme=yytext(); return ORACLE;
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
