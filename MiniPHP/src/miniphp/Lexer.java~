/* The following code was generated by JFlex 1.6.1 */

package miniphp;
import static miniphp.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/keviu/Documents/Ciclo 5/Lenguajes/Proyecto/Proyecto-PHP-lexico/MiniPHP/src/miniphp/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\102\1\71\1\73\1\73\1\72\22\0\1\102\1\41\1\77"+
    "\1\101\1\100\1\37\1\44\1\75\1\56\1\61\1\35\1\33\1\65"+
    "\1\34\1\54\1\36\1\1\1\70\6\67\2\66\1\55\1\64\1\43"+
    "\1\40\1\42\1\103\1\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\13"+
    "\1\60\1\76\1\63\1\0\1\32\1\0\1\45\1\3\1\4\1\47"+
    "\1\6\1\7\1\10\1\105\1\12\1\13\1\13\1\14\1\15\1\46"+
    "\1\50\1\104\1\21\1\51\1\23\1\24\1\25\1\26\1\27\1\52"+
    "\1\31\1\13\1\57\1\53\1\62\1\0\6\13\1\74\172\13\u1f28\0"+
    "\1\73\1\73\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\22\4\5\5\1\6\1\7\2\1"+
    "\1\2\2\4\1\2\2\6\1\10\1\11\1\12\1\13"+
    "\1\3\1\14\1\15\3\2\1\16\1\2\1\3\4\0"+
    "\1\17\2\4\1\20\34\4\2\0\1\7\2\4\1\17"+
    "\1\0\1\21\3\0\2\22\1\23\1\3\1\17\1\0"+
    "\1\17\1\3\40\4\2\0\1\7\2\21\1\22\4\17"+
    "\27\4\1\24\1\4\1\16\1\0\1\22\2\17\25\4"+
    "\1\25\1\22\2\4\1\20\12\4\1\22\10\4\1\20"+
    "\1\4\1\22\4\4\1\22\2\4\1\22\1\4\1\22"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\1\26\2\0"+
    "\2\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\106\0\u06d6\0\u071c\0\106\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\u087a\0\u08c0\0\106\0\106\0\106\0\106\0\106"+
    "\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0"+
    "\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u08c0\0\u0c4e\0\u0c94\0\u0cda"+
    "\0\u0118\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4"+
    "\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324"+
    "\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\106"+
    "\0\u1554\0\u159a\0\u15e0\0\u09d8\0\106\0\u1626\0\u0a1e\0\u166c"+
    "\0\u16b2\0\u16f8\0\106\0\u0b7c\0\u173e\0\u1784\0\u17ca\0\u0c08"+
    "\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a"+
    "\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u0118\0\u09d8\0\u0a1e\0\u215c\0\u21a2\0\u21e8"+
    "\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418"+
    "\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648"+
    "\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878"+
    "\0\u28be\0\u0118\0\u2904\0\106\0\u294a\0\u2990\0\u29d6\0\u2a1c"+
    "\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c"+
    "\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c"+
    "\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\106\0\u3020\0\u3066"+
    "\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296"+
    "\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u350c\0\u366a\0\u36b0"+
    "\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0"+
    "\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10"+
    "\0\u3b56\0\u3b9c\0\u3be2\0\106\0\u3c28\0\u3c6e\0\u3a84\0\u3aca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\5\1\13\1\5\1\14\1\5\1\15\1\16"+
    "\1\17\1\5\1\20\1\21\1\22\1\23\1\24\3\5"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\15\1\7\1\16\1\20"+
    "\1\41\1\42\1\43\1\44\3\45\3\46\1\47\1\50"+
    "\3\51\1\52\1\53\1\0\1\5\1\54\1\2\1\55"+
    "\1\56\1\57\1\53\1\60\1\17\1\5\107\0\1\61"+
    "\1\0\1\62\2\0\1\63\21\0\1\64\21\0\1\64"+
    "\1\0\1\65\11\0\1\66\2\61\16\0\2\5\1\67"+
    "\16\5\1\70\1\71\7\5\12\0\4\5\1\70\1\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\32\5"+
    "\12\0\6\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\1\5\1\72\11\5\1\73\2\5\1\74\13\5"+
    "\12\0\1\72\2\5\1\74\2\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\1\0\5\5\1\75\3\5\1\76"+
    "\20\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\3\5\1\77\10\5\1\100\1\101\7\5"+
    "\1\102\1\5\1\103\2\5\12\0\1\5\1\101\3\5"+
    "\1\103\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\1\5\1\104\7\5\1\105\12\5\1\106\5\5\12\0"+
    "\1\104\5\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\13\5\1\107\2\5\1\110\13\5\12\0\3\5"+
    "\1\110\2\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\14\5\1\111\1\112\4\5\1\113\7\5\12\0"+
    "\1\5\1\112\4\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\11\5\1\114\20\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\1\5\1\115"+
    "\3\5\1\116\24\5\12\0\1\115\5\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\21\5\1\71\10\5"+
    "\12\0\4\5\1\71\1\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\21\5\1\117\2\5\1\120\5\5"+
    "\12\0\4\5\1\117\1\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\5\5\1\121\24\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\23\5"+
    "\1\122\6\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\10\5\1\123\10\5\1\124\10\5"+
    "\12\0\4\5\1\124\1\5\13\0\3\5\3\0\1\5"+
    "\7\0\1\5\1\123\1\0\15\5\1\113\4\5\1\76"+
    "\7\5\12\0\1\5\1\113\4\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\1\0\1\5\1\16\30\5\12\0"+
    "\1\16\5\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\31\5\1\125\12\0\6\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\1\0\1\3\31\0\1\44\4\0"+
    "\1\44\13\0\1\65\11\0\3\51\16\0\1\3\32\0"+
    "\1\44\3\0\1\44\13\0\1\65\11\0\3\51\52\0"+
    "\1\32\2\0\1\44\102\0\1\126\1\57\1\0\1\44"+
    "\105\0\1\35\1\0\1\35\103\0\1\35\105\0\1\35"+
    "\42\0\1\127\46\0\1\130\42\0\2\5\1\67\16\5"+
    "\1\70\1\71\7\5\12\0\1\5\1\131\2\5\1\70"+
    "\1\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\32\5\12\0\3\5\1\132\2\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\53\0\1\130\33\0\1\133\64\0"+
    "\3\133\16\0\1\51\4\0\1\63\45\0\1\65\11\0"+
    "\3\51\106\0\1\52\106\0\1\53\7\0\1\53\3\0"+
    "\56\134\1\0\2\134\1\0\7\134\1\0\3\134\1\135"+
    "\1\136\7\134\56\137\1\0\2\137\1\0\7\137\1\0"+
    "\4\137\1\140\1\135\6\137\2\0\20\141\1\142\10\141"+
    "\12\0\4\141\1\142\1\141\21\0\1\141\7\0\2\141"+
    "\71\57\4\0\11\57\42\0\1\143\44\0\1\61\4\0"+
    "\1\63\45\0\1\65\11\0\1\66\2\61\16\0\1\144"+
    "\66\0\1\144\16\0\1\145\31\0\2\146\31\0\3\147"+
    "\16\0\7\150\35\0\1\150\1\0\1\150\16\0\3\150"+
    "\16\0\1\66\4\0\1\63\45\0\1\65\11\0\3\66"+
    "\16\0\22\5\1\151\7\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\21\5\1\152\10\5"+
    "\12\0\4\5\1\152\1\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\13\5\1\153\7\5\1\154\6\5"+
    "\12\0\6\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\1\5\1\155\14\5\1\156\13\5\12\0\1\155"+
    "\2\5\1\156\2\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\15\5\1\114\14\5\12\0\1\5\1\114"+
    "\4\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\3\5\1\157\2\5\1\160\23\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\5\5\1\71"+
    "\24\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\10\5\1\161\21\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\1\5\1\161\1\0\17\5"+
    "\1\162\12\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\1\162\1\5\1\0\4\5\1\163\25\5\12\0"+
    "\2\5\1\163\3\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\1\5\1\164\30\5\12\0\1\164\5\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\11\5"+
    "\1\165\11\5\1\166\6\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\13\5\1\167\16\5"+
    "\12\0\6\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\15\5\1\102\14\5\12\0\1\5\1\102\4\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\15\5"+
    "\1\170\14\5\12\0\1\5\1\170\4\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\16\5\1\171\13\5"+
    "\12\0\3\5\1\171\2\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\23\5\1\161\6\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\17\5"+
    "\1\172\12\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\1\172\1\5\1\0\3\5\1\173\16\5\1\174"+
    "\1\175\6\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\22\5\1\176\7\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\22\5"+
    "\1\165\7\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\14\5\1\177\15\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\26\5"+
    "\1\71\3\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\11\5\1\200\4\5\1\201\13\5"+
    "\12\0\3\5\1\201\2\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\2\5\1\202\27\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\20\5"+
    "\1\203\11\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\1\5\1\204\30\5\12\0\1\204"+
    "\5\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\21\5\1\205\10\5\12\0\4\5\1\205\1\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\1\5\1\206"+
    "\22\5\1\207\3\5\1\71\1\5\12\0\1\206\5\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\10\5"+
    "\1\210\21\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\1\5\1\210\35\126\1\211\1\0\17\126\1\0"+
    "\2\126\1\0\24\126\104\0\1\212\2\0\32\5\12\0"+
    "\2\5\1\213\3\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\32\5\12\0\4\5\1\213\1\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\1\133\4\0"+
    "\1\63\57\0\3\133\15\0\56\134\1\0\2\134\1\0"+
    "\7\134\1\0\3\134\1\214\1\136\7\134\56\137\1\0"+
    "\2\137\1\0\7\137\1\0\4\137\1\140\1\215\6\137"+
    "\1\0\32\141\12\0\6\141\13\0\3\141\3\0\1\141"+
    "\7\0\2\141\1\0\5\141\1\216\24\141\12\0\6\141"+
    "\13\0\3\141\3\0\1\141\7\0\2\141\1\217\1\220"+
    "\1\217\1\221\24\217\1\222\21\217\1\222\14\217\2\220"+
    "\4\0\11\217\1\0\1\145\64\0\3\147\15\0\1\217"+
    "\1\147\64\217\3\147\4\0\11\217\1\0\23\5\1\223"+
    "\6\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\1\5\1\224\30\5\12\0\1\224\5\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\13\5"+
    "\1\225\16\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\3\5\1\226\26\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\22\5"+
    "\1\227\7\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\15\5\1\76\14\5\12\0\1\5"+
    "\1\76\4\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\13\5\1\230\16\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\1\5\1\231\30\5"+
    "\12\0\1\231\5\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\16\5\1\71\13\5\12\0\3\5\1\71"+
    "\2\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\23\5\1\224\6\5\12\0\6\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\1\0\4\5\1\232\1\5\1\233"+
    "\2\5\1\234\10\5\1\235\3\5\1\236\3\5\12\0"+
    "\2\5\1\232\3\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\13\5\1\71\16\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\23\5\1\71"+
    "\6\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\5\5\1\237\24\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\22\5\1\207"+
    "\7\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\3\5\1\240\26\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\2\5\1\102"+
    "\27\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\13\5\1\241\16\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\13\5\1\242"+
    "\16\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\23\5\1\243\6\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\5\5\1\244"+
    "\24\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\5\5\1\165\24\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\5\5\1\245"+
    "\24\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\15\5\1\165\7\5\1\246\4\5\12\0"+
    "\1\5\1\165\4\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\23\5\1\247\6\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\13\5\1\250"+
    "\16\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\24\5\1\251\5\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\23\5\1\250"+
    "\6\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\16\5\1\116\13\5\12\0\3\5\1\116"+
    "\2\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\11\5\1\165\20\5\12\0\6\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\1\0\5\5\1\252\24\5\12\0"+
    "\6\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\1\5\1\253\30\5\12\0\1\253\5\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\36\0\1\254\154\0\1\255"+
    "\1\0\3\141\1\256\26\141\12\0\6\141\13\0\3\141"+
    "\3\0\1\141\7\0\2\141\1\0\1\217\64\0\3\217"+
    "\15\0\1\217\1\220\65\217\2\220\4\0\11\217\1\0"+
    "\1\257\64\0\2\217\1\257\16\0\7\260\35\0\1\260"+
    "\1\0\1\260\16\0\3\260\16\0\21\5\1\261\10\5"+
    "\12\0\4\5\1\261\1\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\30\5\1\71\1\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\1\5"+
    "\1\262\30\5\12\0\1\262\5\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\1\0\10\5\1\71\21\5\12\0"+
    "\6\5\13\0\3\5\3\0\1\5\7\0\1\5\1\71"+
    "\1\0\22\5\1\71\7\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\1\5\1\263\30\5"+
    "\12\0\1\263\5\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\24\5\1\264\5\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\5\5\1\265"+
    "\24\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\16\5\1\266\13\5\12\0\3\5\1\266"+
    "\2\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\6\5\1\71\23\5\12\0\6\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\1\0\26\5\1\267\3\5\12\0"+
    "\6\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\10\5\1\270\21\5\12\0\6\5\13\0\3\5\3\0"+
    "\1\5\7\0\1\5\1\270\1\0\15\5\1\271\14\5"+
    "\12\0\1\5\1\271\4\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\23\5\1\272\6\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\5\5"+
    "\1\273\24\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\24\5\1\274\5\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\1\5"+
    "\1\275\3\5\1\276\24\5\12\0\1\275\5\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\21\5\1\277"+
    "\10\5\12\0\4\5\1\277\1\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\1\0\22\5\1\300\7\5\12\0"+
    "\6\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\1\5\1\301\30\5\12\0\1\301\5\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\5\5\1\302\24\5"+
    "\12\0\6\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\11\5\1\303\20\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\11\5\1\304\20\5"+
    "\12\0\6\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\13\5\1\305\16\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\104\0\1\306\2\0\16\141"+
    "\1\307\13\141\12\0\3\141\1\307\2\141\13\0\3\141"+
    "\3\0\1\141\7\0\2\141\1\217\1\257\66\217\1\257"+
    "\4\0\12\217\7\260\35\217\1\260\1\217\1\260\16\217"+
    "\3\260\4\0\11\217\1\0\1\5\1\310\30\5\12\0"+
    "\1\310\5\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\2\5\1\311\27\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\21\5\1\76\10\5"+
    "\12\0\4\5\1\76\1\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\13\5\1\165\16\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\3\5"+
    "\1\157\26\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\21\5\1\312\10\5\12\0\4\5"+
    "\1\312\1\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\11\5\1\313\20\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\11\5\1\311\20\5"+
    "\12\0\6\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\4\5\1\227\25\5\12\0\2\5\1\227\3\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\11\5"+
    "\1\314\20\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\14\5\1\315\15\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\4\5"+
    "\1\316\25\5\12\0\2\5\1\316\3\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\15\5\1\317\14\5"+
    "\12\0\1\5\1\317\4\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\1\5\1\320\30\5\12\0\1\320"+
    "\5\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\6\5\1\321\23\5\12\0\6\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\1\0\17\5\1\321\12\5\12\0"+
    "\6\5\13\0\3\5\3\0\1\5\7\0\1\321\1\5"+
    "\1\0\23\5\1\76\6\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\3\5\1\322\26\5"+
    "\12\0\6\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\3\5\1\71\26\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\21\5\1\323\10\5"+
    "\12\0\4\5\1\323\1\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\23\5\1\324\6\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\21\141"+
    "\1\325\10\141\12\0\4\141\1\325\1\141\13\0\3\141"+
    "\3\0\1\141\7\0\2\141\1\0\3\5\1\165\26\5"+
    "\12\0\6\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\13\5\1\76\16\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\5\5\1\326\24\5"+
    "\12\0\6\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\23\5\1\154\6\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\16\5\1\327\13\5"+
    "\12\0\3\5\1\327\2\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\5\5\1\330\24\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\5\5"+
    "\1\331\24\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\3\5\1\332\26\5\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\4\5"+
    "\1\333\25\5\12\0\2\5\1\333\3\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\1\5\1\334\30\5"+
    "\12\0\1\334\5\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\23\5\1\335\6\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\5\5\1\336"+
    "\24\5\12\0\6\5\13\0\3\5\3\0\1\5\7\0"+
    "\2\5\1\0\31\5\1\337\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\4\141\1\340\25\141"+
    "\12\0\2\141\1\340\3\141\13\0\3\141\3\0\1\141"+
    "\7\0\2\141\1\0\1\5\1\154\30\5\12\0\1\154"+
    "\5\5\13\0\3\5\3\0\1\5\7\0\2\5\1\0"+
    "\15\5\1\71\14\5\12\0\1\5\1\71\4\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\1\0\15\5\1\341"+
    "\14\5\12\0\1\5\1\341\4\5\13\0\3\5\3\0"+
    "\1\5\7\0\2\5\1\0\31\5\1\342\12\0\6\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\5\5"+
    "\1\333\24\5\12\0\6\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\16\5\1\234\13\5\12\0\3\5"+
    "\1\234\2\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\3\5\1\76\26\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\5\5\1\343\24\5"+
    "\12\0\6\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\3\5\1\344\26\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\22\141\1\345\7\141"+
    "\12\0\6\141\13\0\3\141\3\0\1\141\7\0\2\141"+
    "\1\0\23\5\1\227\6\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\16\5\1\346\13\5"+
    "\12\0\3\5\1\346\2\5\13\0\3\5\3\0\1\5"+
    "\7\0\2\5\1\0\4\5\1\71\25\5\12\0\2\5"+
    "\1\71\3\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\16\5\1\347\13\5\12\0\3\5\1\347\2\5"+
    "\13\0\3\5\3\0\1\5\7\0\2\5\1\0\5\141"+
    "\1\350\24\141\12\0\6\141\13\0\3\141\3\0\1\141"+
    "\7\0\2\141\1\0\15\5\1\334\14\5\12\0\1\5"+
    "\1\334\4\5\13\0\3\5\3\0\1\5\7\0\2\5"+
    "\1\0\14\5\1\351\15\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\2\5\1\0\23\141\1\352\6\141"+
    "\12\0\6\141\13\0\3\141\3\0\1\141\7\0\2\141"+
    "\1\0\17\5\1\353\12\5\12\0\6\5\13\0\3\5"+
    "\3\0\1\5\7\0\1\353\1\5\1\0\32\141\12\0"+
    "\6\141\5\0\1\354\5\0\3\141\3\0\1\141\7\0"+
    "\2\141\1\0\11\5\1\355\20\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\75\0\1\356\1\0"+
    "\1\357\7\0\13\5\1\360\16\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\56\356\1\0\2\356"+
    "\1\0\7\356\1\0\3\356\1\361\1\362\7\356\56\357"+
    "\1\0\2\357\1\0\7\357\1\0\4\357\1\363\1\361"+
    "\6\357\1\0\5\5\1\16\24\5\12\0\6\5\13\0"+
    "\3\5\3\0\1\5\7\0\2\5\63\0\1\364\22\0"+
    "\56\356\1\0\2\356\1\0\7\356\1\0\3\356\1\365"+
    "\1\362\7\356\56\357\1\0\2\357\1\0\7\357\1\0"+
    "\4\357\1\363\1\366\6\357\56\356\1\0\2\356\1\0"+
    "\1\356\1\367\5\356\1\0\3\356\1\361\1\362\7\356"+
    "\56\357\1\0\2\357\1\0\1\357\1\370\5\357\1\0"+
    "\4\357\1\363\1\361\6\357";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\27\1\1\11\2\1\1\11\6\1\5\11"+
    "\11\1\4\0\40\1\2\0\1\11\3\1\1\0\1\11"+
    "\3\0\2\1\1\11\2\1\1\0\42\1\2\0\41\1"+
    "\1\11\1\0\30\1\1\11\45\1\1\0\1\1\2\0"+
    "\1\1\3\0\1\11\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int lineNumber = 1;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext();return OPE_COM;
            }
          case 23: break;
          case 2: 
            { lexeme=yytext();return ERROR;
            }
          case 24: break;
          case 3: 
            { lexeme=yytext();return INT;
            }
          case 25: break;
          case 4: 
            { lexeme=yytext();return ID;
            }
          case 26: break;
          case 5: 
            { lexeme=yytext();return OPE_ARI;
            }
          case 27: break;
          case 6: 
            { lexeme=yytext();return OPE_AD;
            }
          case 28: break;
          case 7: 
            { lexeme=yytext();return OPE_LOG;
            }
          case 29: break;
          case 8: 
            { lexeme=yytext();return OPEN;
            }
          case 30: break;
          case 9: 
            { lexeme=yytext();return CLOSE;
            }
          case 31: break;
          case 10: 
            { lexeme=yytext();return PUNTOCOMA;
            }
          case 32: break;
          case 11: 
            { lexeme=yytext();return COMA;
            }
          case 33: break;
          case 12: 
            { lineNumber++;lexeme=yytext(); return NUEVALINEA;
            }
          case 34: break;
          case 13: 
            { lexeme=yytext(); return ESPACIO;
            }
          case 35: break;
          case 14: 
            { lexeme=yytext();return COMENT;
            }
          case 36: break;
          case 15: 
            { lexeme=yytext();return FLOAT;
            }
          case 37: break;
          case 16: 
            { lexeme=yytext(); return RESERWORD;
            }
          case 38: break;
          case 17: 
            { lexeme=yytext();return STRING;
            }
          case 39: break;
          case 18: 
            { lexeme=yytext();return VAR;
            }
          case 40: break;
          case 19: 
            { lexeme=yytext(); return CIERRA_PHP;
            }
          case 41: break;
          case 20: 
            { lexeme=yytext();return BOOL;
            }
          case 42: break;
          case 21: 
            { lexeme=yytext(); return ABRE_PHP;
            }
          case 43: break;
          case 22: 
            { lexeme=yytext(); return ORACLE;
            }
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
