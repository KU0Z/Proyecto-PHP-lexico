/* The following code was generated by JFlex 1.6.1 */

package miniphp;
import static miniphp.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/keviu/Documents/Ciclo 5/Lenguajes/Proyecto/Proyecto-PHP-lexico/MiniPHP/src/miniphp/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\62\1\101\1\103\1\103\1\102\22\0\1\62\1\40\1\64"+
    "\1\60\1\57\1\36\1\43\1\65\1\66\1\71\1\34\1\33\1\75"+
    "\1\33\1\53\1\35\1\1\1\100\6\77\2\76\1\55\1\74\1\42"+
    "\1\37\1\41\1\54\1\55\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\13"+
    "\1\70\1\61\1\73\1\56\1\32\1\0\1\44\1\3\1\4\1\46"+
    "\1\6\1\7\1\10\1\106\1\12\1\13\1\13\1\14\1\15\1\45"+
    "\1\47\1\105\1\21\1\50\1\23\1\24\1\25\1\26\1\27\1\51"+
    "\1\31\1\13\1\67\1\52\1\72\1\0\6\13\1\104\33\13\1\63"+
    "\35\13\1\63\100\13\u1f28\0\1\103\1\103\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\21\3\1\4\4\5\1\4\1\6"+
    "\2\7\1\6\2\3\7\4\1\10\3\4\1\11\1\12"+
    "\1\13\1\14\1\2\1\15\1\2\4\16\1\0\1\17"+
    "\2\3\1\20\34\3\1\5\1\0\1\21\1\7\1\0"+
    "\1\6\2\3\1\17\1\22\1\0\2\23\4\0\1\24"+
    "\2\0\1\2\1\17\1\0\1\17\1\2\1\0\40\3"+
    "\2\0\1\6\1\23\2\24\7\17\27\3\1\25\1\3"+
    "\1\21\1\0\1\23\5\17\25\3\1\26\1\23\2\17"+
    "\2\3\1\20\12\3\1\23\10\3\1\20\1\3\1\23"+
    "\4\3\1\23\2\3\1\23\1\3\1\23\1\3\1\0"+
    "\1\3\2\0\1\3\4\0\1\27\1\0\2\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u08e0\0\u0927\0\u096e\0\107\0\u06a8\0\u09b5\0\u09fc\0\u0a43"+
    "\0\u011c\0\u0a8a\0\u0ad1\0\107\0\107\0\107\0\107\0\u0b18"+
    "\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50"+
    "\0\u0d97\0\u0dde\0\u011c\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41"+
    "\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1"+
    "\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\107"+
    "\0\u15e9\0\u09fc\0\107\0\u1630\0\107\0\u1677\0\u16be\0\u1705"+
    "\0\107\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u0a8a\0\u18af"+
    "\0\107\0\u0ad1\0\u18f6\0\u0c34\0\u193d\0\u1984\0\u19cb\0\u0cc2"+
    "\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03"+
    "\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073"+
    "\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab"+
    "\0\u22f2\0\u2339\0\u2380\0\u011c\0\u23c7\0\u0a8a\0\u0ad1\0\u240e"+
    "\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646"+
    "\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e"+
    "\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6"+
    "\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u011c\0\u2c60\0\107"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98"+
    "\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0"+
    "\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308"+
    "\0\u334f\0\u3396\0\u33dd\0\u3424\0\107\0\u346b\0\u34b2\0\u34f9"+
    "\0\u3540\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731"+
    "\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969"+
    "\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u39f7\0\u3b5a"+
    "\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92"+
    "\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca"+
    "\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d\0\107\0\u4174\0\u3f83"+
    "\0\u3fca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\5\1\13\1\5\1\14\1\5\1\15\1\16"+
    "\1\17\1\5\1\20\1\21\1\22\1\23\1\24\3\5"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\15\1\7\1\16\1\20\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\44"+
    "\1\50\1\51\1\52\1\53\3\54\3\55\1\56\1\57"+
    "\3\60\1\61\1\50\1\0\1\5\1\17\1\5\110\0"+
    "\1\62\1\63\1\64\2\63\1\65\21\63\1\66\2\63"+
    "\11\0\5\63\1\66\1\0\1\67\7\0\1\63\12\0"+
    "\1\70\2\62\3\0\3\63\1\0\2\5\1\71\16\5"+
    "\1\72\1\73\7\5\11\0\4\5\1\72\1\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\32\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\1\5\1\74\11\5\1\75\2\5\1\76\13\5\11\0"+
    "\1\74\2\5\1\76\2\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\5\5\1\77\3\5\1\100\20\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\3\5\1\101\10\5\1\102\1\103\7\5\1\104"+
    "\1\5\1\105\2\5\11\0\1\5\1\103\3\5\1\105"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\1\5"+
    "\1\106\7\5\1\107\12\5\1\110\5\5\11\0\1\106"+
    "\5\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\13\5\1\111\2\5\1\112\13\5\11\0\3\5\1\112"+
    "\2\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\14\5\1\113\1\114\4\5\1\115\7\5\11\0\1\5"+
    "\1\114\4\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\11\5\1\116\20\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\1\5\1\117\3\5"+
    "\1\120\24\5\11\0\1\117\5\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\21\5\1\73\10\5\11\0"+
    "\4\5\1\73\1\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\21\5\1\121\2\5\1\122\5\5\11\0"+
    "\4\5\1\121\1\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\5\5\1\123\24\5\11\0\6\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\23\5\1\124"+
    "\6\5\11\0\6\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\10\5\1\125\10\5\1\126\10\5\11\0"+
    "\4\5\1\126\1\5\11\0\1\5\12\0\3\5\3\0"+
    "\2\5\1\125\1\0\15\5\1\115\4\5\1\100\7\5"+
    "\11\0\1\5\1\115\4\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\1\5\1\16\30\5\11\0\1\16"+
    "\5\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\31\5\1\127\11\0\6\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\1\3\35\0\1\44\13\0\1\67"+
    "\22\0\3\60\42\0\1\130\2\0\1\44\103\0\1\131"+
    "\1\132\1\0\1\44\106\0\1\44\106\0\1\133\1\0"+
    "\1\133\104\0\1\133\110\0\1\45\104\0\1\133\2\0"+
    "\1\45\11\0\1\134\71\0\1\44\3\0\1\135\44\0"+
    "\2\5\1\71\16\5\1\72\1\73\7\5\11\0\1\5"+
    "\1\136\2\5\1\72\1\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\32\5\11\0\3\5\1\137\2\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\37\0\1\44"+
    "\12\0\1\135\35\0\1\140\35\0\1\44\36\0\3\140"+
    "\47\0\1\141\46\0\1\142\20\143\1\144\10\143\1\145"+
    "\10\0\4\143\1\144\1\143\11\0\1\143\12\0\3\146"+
    "\3\0\3\143\101\132\4\0\2\132\62\0\1\50\17\0"+
    "\1\50\4\0\61\147\1\150\2\147\1\151\1\147\1\0"+
    "\2\147\1\0\7\147\1\0\5\147\61\152\1\153\3\152"+
    "\1\151\1\0\2\152\1\0\7\152\1\0\5\152\1\0"+
    "\1\60\4\63\1\65\24\63\11\0\6\63\1\0\1\67"+
    "\7\0\1\63\12\0\3\60\3\0\3\63\101\0\1\61"+
    "\6\0\1\62\4\63\1\65\24\63\11\0\6\63\1\0"+
    "\1\67\7\0\1\63\12\0\1\70\2\62\3\0\3\63"+
    "\1\0\32\63\11\0\6\63\11\0\1\63\12\0\3\63"+
    "\3\0\3\63\1\0\1\154\31\63\11\0\6\63\11\0"+
    "\1\63\12\0\2\63\1\154\3\0\3\63\1\0\1\155"+
    "\31\63\1\156\10\0\6\63\11\0\1\63\12\0\3\157"+
    "\3\0\3\63\1\0\7\160\23\63\11\0\1\160\1\63"+
    "\1\160\3\63\11\0\1\63\12\0\3\160\3\0\3\63"+
    "\1\0\1\140\74\0\3\140\7\0\1\70\4\0\1\161"+
    "\44\0\1\67\22\0\3\70\7\0\22\5\1\162\7\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\21\5\1\163\10\5\11\0\4\5\1\163\1\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\13\5"+
    "\1\164\7\5\1\165\6\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\1\5\1\166\14\5"+
    "\1\167\13\5\11\0\1\166\2\5\1\167\2\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\15\5\1\116"+
    "\14\5\11\0\1\5\1\116\4\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\3\5\1\170\2\5\1\171"+
    "\23\5\11\0\6\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\5\5\1\73\24\5\11\0\6\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\10\5\1\172"+
    "\21\5\11\0\6\5\11\0\1\5\12\0\3\5\3\0"+
    "\2\5\1\172\1\0\17\5\1\173\12\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\1\5\1\173\1\5"+
    "\1\0\4\5\1\174\25\5\11\0\2\5\1\174\3\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\1\5"+
    "\1\175\30\5\11\0\1\175\5\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\11\5\1\176\11\5\1\177"+
    "\6\5\11\0\6\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\13\5\1\200\16\5\11\0\6\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\15\5\1\104"+
    "\14\5\11\0\1\5\1\104\4\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\15\5\1\201\14\5\11\0"+
    "\1\5\1\201\4\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\16\5\1\202\13\5\11\0\3\5\1\202"+
    "\2\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\23\5\1\172\6\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\17\5\1\203\12\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\1\5\1\203"+
    "\1\5\1\0\3\5\1\204\16\5\1\205\1\206\6\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\22\5\1\207\7\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\22\5\1\176\7\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\14\5\1\210\15\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\26\5\1\73\3\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\11\5\1\211\4\5\1\212\13\5\11\0\3\5"+
    "\1\212\2\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\2\5\1\213\27\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\20\5\1\214\11\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\1\5\1\215\30\5\11\0\1\215\5\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\21\5\1\216"+
    "\10\5\11\0\4\5\1\216\1\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\1\5\1\217\22\5\1\220"+
    "\3\5\1\73\1\5\11\0\1\217\5\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\10\5\1\221\21\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\2\5"+
    "\1\221\34\131\1\222\1\0\30\131\1\0\2\131\1\0"+
    "\15\131\105\0\1\223\2\0\32\5\11\0\2\5\1\224"+
    "\3\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\32\5\11\0\4\5\1\224\1\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\1\140\4\0\1\161\67\0"+
    "\3\140\7\0\1\142\31\63\11\0\6\63\11\0\1\63"+
    "\13\0\2\142\3\0\3\63\1\0\32\143\11\0\6\143"+
    "\11\0\1\143\12\0\3\143\3\0\3\143\1\0\5\143"+
    "\1\225\24\143\11\0\6\143\11\0\1\143\12\0\3\143"+
    "\3\0\3\143\1\0\1\142\74\0\3\146\7\0\1\146"+
    "\31\63\11\0\6\63\11\0\1\63\12\0\3\146\3\0"+
    "\3\63\61\147\1\150\2\147\1\226\1\147\1\0\2\147"+
    "\1\0\7\147\1\0\5\147\61\152\1\153\3\152\1\227"+
    "\1\0\2\152\1\0\7\152\1\0\5\152\1\230\1\231"+
    "\1\232\1\233\24\232\1\234\2\232\11\230\5\232\1\234"+
    "\11\230\1\232\12\230\1\232\2\231\3\0\1\63\2\232"+
    "\1\0\1\235\74\0\3\236\6\0\1\230\1\157\31\232"+
    "\11\230\6\232\11\230\1\232\12\230\3\157\3\0\1\63"+
    "\2\232\1\0\1\235\31\0\1\156\42\0\3\236\7\0"+
    "\23\5\1\237\6\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\1\5\1\240\30\5\11\0"+
    "\1\240\5\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\13\5\1\241\16\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\3\5\1\242\26\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\22\5\1\243\7\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\15\5\1\100\14\5"+
    "\11\0\1\5\1\100\4\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\13\5\1\244\16\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\1\5"+
    "\1\245\30\5\11\0\1\245\5\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\16\5\1\73\13\5\11\0"+
    "\3\5\1\73\2\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\23\5\1\240\6\5\11\0\6\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\4\5\1\246"+
    "\1\5\1\247\2\5\1\250\10\5\1\251\3\5\1\252"+
    "\3\5\11\0\2\5\1\246\3\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\13\5\1\73\16\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\23\5\1\73\6\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\5\5\1\253\24\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\22\5\1\220\7\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\3\5\1\254\26\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\2\5\1\104\27\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\13\5\1\255\16\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\13\5\1\256\16\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\23\5\1\257\6\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\5\5\1\260\24\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\5\5\1\176\24\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\5\5\1\261\24\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\15\5\1\176\7\5\1\262"+
    "\4\5\11\0\1\5\1\176\4\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\23\5\1\263\6\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\13\5\1\264\16\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\24\5\1\265\5\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\23\5\1\264\6\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\16\5\1\120\13\5\11\0"+
    "\3\5\1\120\2\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\11\5\1\176\20\5\11\0\6\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\5\5\1\266"+
    "\24\5\11\0\6\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\1\5\1\267\30\5\11\0\1\267\5\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\35\0\1\270"+
    "\157\0\1\271\1\0\3\143\1\272\26\143\11\0\6\143"+
    "\11\0\1\143\12\0\3\143\3\0\3\143\1\0\1\230"+
    "\74\0\3\230\6\0\1\230\1\231\31\232\11\230\6\232"+
    "\11\230\1\232\12\230\1\232\2\231\3\0\1\63\2\232"+
    "\1\0\1\232\31\63\11\0\6\63\11\0\1\63\12\0"+
    "\3\232\3\0\3\63\1\0\1\273\31\63\11\0\6\63"+
    "\11\0\1\63\12\0\2\232\1\273\3\0\3\63\1\0"+
    "\7\274\23\63\11\0\1\274\1\63\1\274\3\63\11\0"+
    "\1\63\12\0\3\274\3\0\3\63\1\230\1\275\1\230"+
    "\1\276\24\230\1\277\20\230\1\277\25\230\2\275\4\0"+
    "\3\230\1\236\74\230\3\236\4\0\2\230\1\0\21\5"+
    "\1\300\10\5\11\0\4\5\1\300\1\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\30\5\1\73\1\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\1\5\1\301\30\5\11\0\1\301\5\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\10\5\1\73"+
    "\21\5\11\0\6\5\11\0\1\5\12\0\3\5\3\0"+
    "\2\5\1\73\1\0\22\5\1\73\7\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\1\5"+
    "\1\302\30\5\11\0\1\302\5\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\24\5\1\303\5\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\5\5\1\304\24\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\16\5\1\305\13\5\11\0"+
    "\3\5\1\305\2\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\6\5\1\73\23\5\11\0\6\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\26\5\1\306"+
    "\3\5\11\0\6\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\10\5\1\307\21\5\11\0\6\5\11\0"+
    "\1\5\12\0\3\5\3\0\2\5\1\307\1\0\15\5"+
    "\1\310\14\5\11\0\1\5\1\310\4\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\23\5\1\311\6\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\5\5\1\312\24\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\24\5\1\313\5\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\1\5\1\314\3\5\1\315\24\5\11\0\1\314"+
    "\5\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\21\5\1\316\10\5\11\0\4\5\1\316\1\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\22\5\1\317"+
    "\7\5\11\0\6\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\1\5\1\320\30\5\11\0\1\320\5\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\5\5"+
    "\1\321\24\5\11\0\6\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\11\5\1\322\20\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\11\5"+
    "\1\323\20\5\11\0\6\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\13\5\1\324\16\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\105\0\1\325"+
    "\2\0\16\143\1\326\13\143\11\0\3\143\1\326\2\143"+
    "\11\0\1\143\12\0\3\143\3\0\3\143\1\230\1\273"+
    "\31\232\11\230\6\232\11\230\1\232\12\230\2\232\1\273"+
    "\3\0\1\63\2\232\1\230\7\274\23\232\11\230\1\274"+
    "\1\232\1\274\3\232\11\230\1\232\12\230\3\274\3\0"+
    "\1\63\2\232\1\230\1\275\75\230\2\275\4\0\2\230"+
    "\1\0\1\327\74\0\2\230\1\327\7\0\7\330\34\0"+
    "\1\330\1\0\1\330\27\0\3\330\7\0\1\5\1\331"+
    "\30\5\11\0\1\331\5\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\2\5\1\332\27\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\21\5"+
    "\1\100\10\5\11\0\4\5\1\100\1\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\13\5\1\176\16\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\3\5\1\170\26\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\21\5\1\333\10\5"+
    "\11\0\4\5\1\333\1\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\11\5\1\334\20\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\11\5"+
    "\1\332\20\5\11\0\6\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\4\5\1\243\25\5\11\0\2\5"+
    "\1\243\3\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\11\5\1\335\20\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\14\5\1\336\15\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\4\5\1\337\25\5\11\0\2\5\1\337\3\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\15\5"+
    "\1\340\14\5\11\0\1\5\1\340\4\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\1\5\1\341\30\5"+
    "\11\0\1\341\5\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\6\5\1\342\23\5\11\0\6\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\17\5\1\342"+
    "\12\5\11\0\6\5\11\0\1\5\12\0\3\5\3\0"+
    "\1\5\1\342\1\5\1\0\23\5\1\100\6\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\3\5\1\343\26\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\3\5\1\73\26\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\21\5\1\344\10\5\11\0\4\5\1\344\1\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\23\5\1\345"+
    "\6\5\11\0\6\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\21\143\1\346\10\143\11\0\4\143\1\346"+
    "\1\143\11\0\1\143\12\0\3\143\3\0\3\143\1\230"+
    "\1\327\76\230\1\327\4\0\3\230\7\330\34\230\1\330"+
    "\1\230\1\330\27\230\3\330\4\0\2\230\1\0\3\5"+
    "\1\176\26\5\11\0\6\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\13\5\1\100\16\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\5\5"+
    "\1\347\24\5\11\0\6\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\23\5\1\165\6\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\16\5"+
    "\1\350\13\5\11\0\3\5\1\350\2\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\5\5\1\351\24\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\5\5\1\352\24\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\3\5\1\353\26\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\4\5\1\354\25\5\11\0\2\5\1\354\3\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\1\5"+
    "\1\355\30\5\11\0\1\355\5\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\23\5\1\356\6\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\5\5\1\357\24\5\11\0\6\5\11\0\1\5\12\0"+
    "\3\5\3\0\3\5\1\0\31\5\1\360\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\4\143"+
    "\1\361\25\143\11\0\2\143\1\361\3\143\11\0\1\143"+
    "\12\0\3\143\3\0\3\143\1\0\1\5\1\165\30\5"+
    "\11\0\1\165\5\5\11\0\1\5\12\0\3\5\3\0"+
    "\3\5\1\0\15\5\1\73\14\5\11\0\1\5\1\73"+
    "\4\5\11\0\1\5\12\0\3\5\3\0\3\5\1\0"+
    "\15\5\1\362\14\5\11\0\1\5\1\362\4\5\11\0"+
    "\1\5\12\0\3\5\3\0\3\5\1\0\31\5\1\363"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\5\5\1\354\24\5\11\0\6\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\16\5\1\250\13\5"+
    "\11\0\3\5\1\250\2\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\3\5\1\100\26\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\5\5"+
    "\1\364\24\5\11\0\6\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\3\5\1\365\26\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\22\143"+
    "\1\366\7\143\11\0\6\143\11\0\1\143\12\0\3\143"+
    "\3\0\3\143\1\0\23\5\1\243\6\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\16\5"+
    "\1\367\13\5\11\0\3\5\1\367\2\5\11\0\1\5"+
    "\12\0\3\5\3\0\3\5\1\0\4\5\1\73\25\5"+
    "\11\0\2\5\1\73\3\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\16\5\1\370\13\5\11\0\3\5"+
    "\1\370\2\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\1\0\5\143\1\371\24\143\11\0\6\143\11\0\1\143"+
    "\12\0\3\143\3\0\3\143\1\0\15\5\1\355\14\5"+
    "\11\0\1\5\1\355\4\5\11\0\1\5\12\0\3\5"+
    "\3\0\3\5\1\0\14\5\1\372\15\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\3\5\1\0\23\143"+
    "\1\373\6\143\11\0\6\143\11\0\1\143\12\0\3\143"+
    "\3\0\3\143\1\0\17\5\1\374\12\5\11\0\6\5"+
    "\11\0\1\5\12\0\3\5\3\0\1\5\1\374\1\5"+
    "\1\0\32\143\11\0\6\143\11\0\1\143\4\0\1\375"+
    "\5\0\3\143\3\0\3\143\1\0\11\5\1\376\20\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\64\0\1\377\1\u0100\22\0\13\5\1\u0101\16\5\11\0"+
    "\6\5\11\0\1\5\12\0\3\5\3\0\3\5\61\377"+
    "\1\u0102\2\377\1\u0103\1\377\1\0\2\377\1\0\7\377"+
    "\1\0\5\377\61\u0100\1\u0104\3\u0100\1\u0103\1\0\2\u0100"+
    "\1\0\7\u0100\1\0\5\u0100\1\0\5\5\1\16\24\5"+
    "\11\0\6\5\11\0\1\5\12\0\3\5\3\0\3\5"+
    "\61\377\1\u0102\2\377\1\u0105\1\377\1\0\2\377\1\0"+
    "\7\377\1\0\5\377\73\0\1\u0106\13\0\61\u0100\1\u0104"+
    "\3\u0100\1\u0107\1\0\2\u0100\1\0\7\u0100\1\0\5\u0100"+
    "\61\377\1\u0102\2\377\1\u0103\1\377\1\0\2\377\1\0"+
    "\1\377\1\u0108\5\377\1\0\5\377\61\u0100\1\u0104\3\u0100"+
    "\1\u0103\1\0\2\u0100\1\0\1\u0100\1\u0109\5\u0100\1\0"+
    "\5\u0100";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16827];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\41\1\1\11\7\1\4\11\7\1\1\0"+
    "\40\1\1\11\1\0\1\1\1\11\1\0\1\11\3\1"+
    "\1\11\1\0\2\1\4\0\1\11\2\0\2\1\1\0"+
    "\2\1\1\0\40\1\2\0\44\1\1\11\1\0\33\1"+
    "\1\11\47\1\1\0\1\1\2\0\1\1\4\0\1\11"+
    "\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int lineNumber = 1;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext();return ERROR;
            }
          case 24: break;
          case 2: 
            { lexeme=yytext();return INT;
            }
          case 25: break;
          case 3: 
            { lexeme=yytext();return ID;
            }
          case 26: break;
          case 4: 
            { lexeme=yytext();return OPE_AD;
            }
          case 27: break;
          case 5: 
            { lexeme=yytext();return OPE_ARI;
            }
          case 28: break;
          case 6: 
            { lexeme=yytext();return OPE_LOGI;
            }
          case 29: break;
          case 7: 
            { lexeme=yytext();return OPE_COM;
            }
          case 30: break;
          case 8: 
            { lexeme=yytext(); return ESPACIO;
            }
          case 31: break;
          case 9: 
            { lexeme=yytext();return OPEN;
            }
          case 32: break;
          case 10: 
            { lexeme=yytext();return CLOSE;
            }
          case 33: break;
          case 11: 
            { lexeme=yytext();return PUNTOCOMA;
            }
          case 34: break;
          case 12: 
            { lexeme=yytext();return COMA;
            }
          case 35: break;
          case 13: 
            { lineNumber++;lexeme=yytext(); return NUEVALINEA;
            }
          case 36: break;
          case 14: 
            { lexeme=yytext(); return ERROR_ID;
            }
          case 37: break;
          case 15: 
            { lexeme=yytext();return FLOAT;
            }
          case 38: break;
          case 16: 
            { lexeme=yytext(); return RESERWORD;
            }
          case 39: break;
          case 17: 
            { lexeme=yytext();return COMENT;
            }
          case 40: break;
          case 18: 
            { lexeme=yytext(); return CIERRA_PHP;
            }
          case 41: break;
          case 19: 
            { lexeme=yytext();return VAR;
            }
          case 42: break;
          case 20: 
            { lexeme=yytext();return STRING;
            }
          case 43: break;
          case 21: 
            { lexeme=yytext();return BOOL;
            }
          case 44: break;
          case 22: 
            { lexeme=yytext(); return ABRE_PHP;
            }
          case 45: break;
          case 23: 
            { lexeme=yytext(); return ORACLE;
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
